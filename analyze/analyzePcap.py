from scapy.all import *
import json
import numpy as np
import datetime
import pandas as pd

# Usage: output an excel for packets of TCPDUMP: hour, minute, second, millisecond

features_final_path = 'E:\\Emnets\\5G\\powerMonitor\\ZTE\data\\'
feature_dirs = []
trace_nums = []
for file in os.listdir(features_final_path):
    print(file)
    file_path = os.path.join(features_final_path,file)
    if os.path.isdir(file_path) and ("trace" in file):
        feature_dirs.append(file_path)
        temp_pos = file.rindex('e')
        trace_nums.append(file[temp_pos+1:])
print(trace_nums)

for trace_num in trace_nums:
    # trace_num = '10'
    port_num = '18026'
    store_path = 'E:\\Emnets\\5G\\powerMonitor\\ZTE\data\\trace'+ trace_num+ '\\'

    limit = 26000000
    count = 0
    timestamps = []
    src_port = []
    dest_port = []
    time_date = []

    filename = store_path + "capture_"+ trace_num +".pcap"
    dst = store_path + "timestamp.json"

    # file_path_pidport = store_path + 'port_PID'+ port_num +'_'+trace_num+'.xls'
    # df_pidport = pd.read_excel(file_path_pidport)
    # data_pidport = df_pidport.loc[:,:].values
    # print(np.shape(data_pidport))

    def func(pkt):
        global limit, count, timestamps, src_port, dest_port
        timestamps.append(str(pkt.time))
        src_port.append(str(pkt.sport))
        dest_port.append(str(pkt.dport))
        count = count + 1
        if limit > 0 and count >= limit:
            return True
        else:
            return False

    def transpose(matrix):
        new_matrix = []
        for i in range(len(matrix[0])):
            matrix1 = []
            for j in range(len(matrix)):
                matrix1.append(matrix[j][i])
            new_matrix.append(matrix1)
        return new_matrix

    if "__main__" == __name__:
        sniff(offline=filename, stop_filter=func, store=False)
        print(np.shape(timestamps))
        print(timestamps)
        pkt_len = len(timestamps)
        hour_list = np.zeros(pkt_len)
        minute_list = np.zeros(pkt_len)
        second_list = np.zeros(pkt_len)
        millisecond_list = np.zeros(pkt_len)
        for index in range(pkt_len):
            [second, millisecond] = timestamps[index].split(".")
            temp_date = datetime.datetime.fromtimestamp(int(second))
            time_date.append(temp_date)
            hour_list[index] = temp_date.hour
            minute_list[index] = temp_date.minute
            second_list[index] = temp_date.second
            millisecond_list[index] = millisecond
        print(np.shape(time_date))
        print(time_date)
        with open(dst, "w") as f:
            json.dump(timestamps, f)

        list = [timestamps, hour_list, minute_list, second_list, millisecond_list, src_port, dest_port]
        list = transpose(list)
        print(np.shape(list))
        dataframe = pd.DataFrame(list)
        print(dataframe)
        # if not os.path.exists(store_path + 'pcap_'+trace_num+'.csv'):
        #     dataframe.to_csv(store_path + 'pcap_'+trace_num+'.csv')
        dataframe.to_csv(store_path + 'pcap_' + trace_num + '.csv')