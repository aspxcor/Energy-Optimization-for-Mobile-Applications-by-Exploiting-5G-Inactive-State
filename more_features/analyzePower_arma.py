import os
import warnings

import sklearn
from deepforest import CascadeForestClassifier
from sklearn import preprocessing
from sklearn.ensemble import RandomForestClassifier
import joblib
import pandas as pd
import numpy as np
import statsmodels.tsa.stattools as st
from statsmodels.tsa.arima_model import ARMA

app = '/qqmusic'
# app = ''

# in mJ
energy_idle_2_con = 400.5*1.2
energy_inac_2_con = 161.5*0.2
energy_con_2_idle = 10
energy_con_2_ina = 10
energy_inac_2_idle = 10

# in mW
energy_con = 1026.4
energy_idle = 112.5
energy_inac = 182.5

# delay
delay_idle_2_con = 1.2
delay_inac_2_con = 0.2

t_w = 0.3
t_s = 2
t_ss = 1.5*t_s

# training_path = "E:/Emnets/5G/powerMonitor/ZTE/data"+app+"/final_features_all_feature_"+str(t_w)+".csv"
# df_features = pd.read_csv(training_path)
# data_feature = df_features.loc[:,:].values
# col = np.shape(data_feature)[1]
# data_features = data_feature[:,1:col-1]
# le = preprocessing.LabelEncoder()
# length = len(data_features[:,-33])
# trace_1 = []
# for i in range(length):
#     trace_1.append(data_features[i,-33])
# print(trace_1)
# data_features[:,-3] = le.fit_transform(data_features[:,-3])
# data_features[:,-13] = le.fit_transform(data_features[:,-13])
# data_features[:,-33] = le.fit_transform(data_features[:,-33])
# le.fit(trace_1)
# ss = sklearn.preprocessing.MinMaxScaler()
# ss.fit(data_features)

prediction_path = "E:/Emnets/5G/powerMonitor/ZTE/data"+app+"/final_features_all_feature_for_prediction_"+str(t_w)+".csv"
df_features_pre = pd.read_csv(prediction_path)
data_feature_pre = df_features_pre.loc[:,:].values
col = np.shape(data_feature_pre)[1]
data_features_pre = data_feature_pre[:,1:col-1]
le_pre = preprocessing.LabelEncoder()
data_features_pre[:,-4] = le_pre.fit_transform(data_features_pre[:,-4])
data_features_pre[:,-14] = le_pre.fit_transform(data_features_pre[:,-14])
data_features_pre[:,-34] = le_pre.fit_transform(data_features_pre[:,-34])
ss_pre = sklearn.preprocessing.MinMaxScaler()
ss_pre.fit(data_features_pre)
features_final_path = "E:/Emnets/5G/powerMonitor/ZTE/data"+app+"/"
rf_model = joblib.load(features_final_path+'rf_' + str(t_w) + '.model')
df_model = CascadeForestClassifier()
df_model.load(features_final_path+'df_' + str(t_w) + '.model')

data_ibt = data_feature_pre[:,col-1]+t_w
# print(data_ibt)
# input()

warnings.filterwarnings("ignore")
# order = st.arma_order_select_ic(data_ibt, max_ar=6, max_ma=6, ic=['aic'])['aic_min_order'] # order_all_combine_past10_pre1_window5_2
# print(order)
# tempModel_aic = ARMA(data_ibt, order).fit()
# input()

all_command = open(features_final_path+'all_unique_command.txt','r')
all_command = all_command.read()[2:-2].split('\', \'')
# print(all_command)
# print(np.shape(all_command))
# input()
total_energys = []
total_delays = []
feature_dirs = []
trace_nums = []

def isInt(num):
    try:
        num = int(str(num))
        return isinstance(num, int)
    except:
        return False

for file in os.listdir(features_final_path):
    # print(file)
    file_path = os.path.join(features_final_path,file)
    if os.path.isdir(file_path) and ("trace" in file):
        feature_dirs.append(file_path)
        temp_pos = file.rindex('e')
        trace_nums.append(file[temp_pos+1:])

inter_session_time = []
for trace_num in trace_nums:
    print(trace_num)
    store_path = "E:/Emnets/5G/powerMonitor/ZTE/data"+app+"/trace" + str(trace_num) + "/"

    file_path_related_pkt = store_path + 'pcap_' + str(trace_num) + '_all_feature_final.csv'

    df_related_pkt = pd.read_csv(file_path_related_pkt)
    data_related_pkt = df_related_pkt.loc[:, :].values
    pkt_len = len(data_related_pkt)
    pre_stat = 0
    actual_stat = 0
    i=0

    session_times = []

    cont_flag = 0
    active_start_time = 0
    total_energy = 0
    total_delay = 0

    if trace_num == (str(1)):
        print("training...")
        while i < pkt_len - 1:
            if cont_flag == 0:
                active_start_time = data_related_pkt[i][2]

            if data_related_pkt[i + 1][2] - data_related_pkt[i][2] <= 0.1:
                i += 1
                cont_flag = 1
                if i == pkt_len - 1:
                    active_end_time = data_related_pkt[i][2]
                continue
            cont_flag = 0
            active_end_time = data_related_pkt[i][2]
            session_times.append(active_start_time)
            session_times.append(active_end_time)
            i += 1
        for session_i in range(1, len(session_times)):
            if session_i % 2 == 0:
                inter_session_time.append(session_times[session_i] - session_times[session_i - 1])
        # order = st.arma_order_select_ic(inter_session_time, max_ar=6, max_ma=6, ic=['aic'])[
        #     'aic_min_order']  # order_all_combine_past10_pre1_window5_2
        # print(order)
        print(inter_session_time)
        # print(np.shape(inter_session_time))
        # tempModel_aic = ARMA(inter_session_time, order).fit()

    # print(inter_session_time)
    # print(np.shape(inter_session_time))
    # input()
    i=0
    y_pre = inter_session_time[0]
    histo_data = []
    while i < pkt_len-1:
        # if pre_stat == 0:
        #     active_time_start.append(data_related_pkt[i][2])
        #     if i != 0:
        #         active_time_end.append(data_related_pkt[i-1][2])
        #         eoc_time_start.append(data_related_pkt[i-1][2])
        if cont_flag == 0:
            active_start_time = data_related_pkt[i][2]
        # active
        if data_related_pkt[i+1][2]-data_related_pkt[i][2]<=0.1:
            i+=1
            cont_flag = 1
            if i == pkt_len - 1:
                active_end_time = data_related_pkt[i][2]
                total_energy += ((active_end_time - active_start_time) * energy_con)
            continue
        # print(i)
        cont_flag = 0
        # judge_pkt.append(i)
        # if()
        # y_cla = tempModel_aic.predict(start=len(inter_session_time)+i+1, end=len(inter_session_time)+i+1, dynamic=False)
        # print(y_cla)
        # y_cla = y_cla[0]
        y_cla = y_pre
        # input()
        y_pre = data_related_pkt[i+1][2]-data_related_pkt[i][2]
        # calculate power to i+1
        # active state
        if y_cla < delay_idle_2_con:
            if data_related_pkt[i+1][2]-data_related_pkt[i][2]<t_ss:
                active_end_time = data_related_pkt[i+1][2]
                total_energy += (active_end_time - active_start_time) * energy_con
            elif data_related_pkt[i + 1][2] - data_related_pkt[i][2] >= t_ss:
                active_end_time = data_related_pkt[i][2] + t_ss
                idle_time = data_related_pkt[i + 1][2] - data_related_pkt[i][2] - t_ss
                total_energy += ((active_end_time - active_start_time) * energy_con + idle_time * energy_idle + energy_idle_2_con)
                total_delay += delay_idle_2_con
            else:
                exit(3)

            # judge_active.append(i)
            # print('no')
        # eoc state
        elif y_cla >= delay_idle_2_con:
            # print('yes')
            if data_related_pkt[i + 1][2] - data_related_pkt[i][2] < y_cla:
                active_end_time = data_related_pkt[i][2] + 0.1
                idle_time = data_related_pkt[i + 1][2] - data_related_pkt[i][2] - 0.1
                total_energy += ((active_end_time - active_start_time) * energy_con + idle_time * energy_idle + energy_idle_2_con)
                total_delay += delay_idle_2_con
            elif data_related_pkt[i + 1][2] - data_related_pkt[i][2] >= y_cla:
                active_end_time = data_related_pkt[i][2] + 0.1
                idle_time = y_cla-0.1
                next_active_time = data_related_pkt[i + 1][2] - data_related_pkt[i][2] -y_cla
                total_energy += ((active_end_time - active_start_time) * energy_con + idle_time * energy_idle + energy_idle_2_con)
            else:
                exit(2)
        else:
            exit(1)
        # print(pre_stat)
        i += 1
        # input()

    print("total_energy_rf: ",total_energy)
    total_energys.append(total_energy)
    print("total_delay_rf: ", total_delay)
    total_delays.append(total_delay)
    # input()

if app == '':
    app = '/browser'
print("energies_"+app[1:]+"_arma_"+str(int(t_w*10))+" = ", total_energys)
print(np.shape(total_energys))
print("delays_"+app[1:]+"_arma_"+str(int(t_w*10))+" = ", total_delays)
print(np.shape(total_delays))




